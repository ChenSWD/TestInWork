/**
 * IO相关Demo
 * 
 * 流：代表任何有能力产出数据的数据源对象或者是有能力接受数据的接收端对象<Thinking in Java>
 * 
 * 流的本质:数据传输，根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作。
 * 
 * 流的作用：为数据源和目的地建立一个输送通道。
 * 
 * 字节流：数据流中最小的数据单元是字节。 字符流：数据流中最小的数据单元是字符， Java中的字符是Unicode编码，一个字符占用两个字节。
 * 
 * 字符流的由来： Java中字符是采用Unicode标准，一个字符是16位，即一个字符使用两个字节来表示。
 * 为此，JAVA中引入了处理字符的流。因为数据编码的不同，而有了对字符进行高效操作的流对象。 本质其实就是基于字节流读取时，去查了指定的码表。
 * 
 * OutputStreamWriter(OutStreamout):将字节流以字符流输出，OutStreamout接口转换成Writer接口
 * 
 * InputStreamReader(InputStream in):将字节流以字符流输入，InputStream接口转换成Reader接口  ---- 完成字节字符的转换。
 * 
 * 节流没有缓冲区，是直接输出的，而字符流是输出到缓冲区的。
 * 因此在输出时，字节流不调用colse()方法时，信息已经输出了，而字符流只有在调用close()方法关闭缓冲区时，信息才输出。
 * 要想字符流在未关闭时输出信息，则需要手动调用flush()方法。
 */
package mtest.io;